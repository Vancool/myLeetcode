class Solution(object):
    def sumNums(self, n):
        """
        :type n: int
        :rtype: int
        """
        return n and (n + self.sumNums(n-1))
    '''
    这题完全不会
    python 写做截断真的好难写，不能单独写出来，只能最后return出去
    人家给了三种解法： 用 and 做截断递归 O(n)
                    用快速幂思想 做 快速加  O(lg(n))
                    位运算 
    '''
    '''
    快速幂思想
    '''

    class Solution(object):
        def sumNums(self, n):
            """
            :type n: int
            :rtype: int
            """
            def Helper(a, n):

                '''
                 Helper 其实是两数相乘，实现 a * n
               不能这么写
               (n > 0) && (k = k + Helper(a<<1, n>>1))

                '''
                return n and (n & 1 and a) + Helper(a << 1, n >> 1)
            return Helper(1+n, n) >> 1

    '''
    位运算实现两数相乘
    位运算真的好难啊
    其实是把 n 拆掉，拆成比如 15 = 8 + 4 + 2 + 1
    然后让 检测 n的 0,1,2,3位是否为1
    比如如果 第三位是1的话， 就让 n+1 去乘上 8 ,转换成移位就是 (n+1) << 3
    所以整个程序可以看成 
    (n+1)*n // 2 = 
     (n+1) * (8+4+2+1) // 2 = 
     ((n+1) << 3 + (n+1) << 2 + (n+1) << 1 + (n+1) ) >> 1 
     
     那么如何检测当前位是否为1呢？ （n>> k位） & 1
     因为  n & -1 = n
     所以乘上第13位的时候就是 ((n+1)&(0-((n>>>13)&1)))<<13
    
    另外注意运算符优先级：
    +- > 移位 > &| 
    为什么从13位开始？ 因为当n < 1000 的最大幂次是13
    '''
    class Solution(object):
        def sumNums(self, n):
            """
            :type n: int
            :rtype: int
            """
            return \
                ( (((n + 1) & (0 - ((n >> 13) & 1))) << 13) + \
                (((n + 1) & (0 - ((n >> 12) & 1))) << 12) + \
                (((n + 1) & (0 - ((n >> 11) & 1))) << 11) + \
                (((n + 1) & (0 - ((n >> 10) & 1))) << 10) + \
                (((n + 1) & (0 - ((n >> 9) & 1))) << 9) + \
                (((n + 1) & (0 - ((n >> 8) & 1))) << 8) + \
                (((n + 1) & (0 - ((n >> 7) & 1))) << 7) + \
                (((n + 1) & (0 - ((n >> 6) & 1))) << 6) + \
                (((n + 1) & (0 - ((n >> 5) & 1))) << 5)+ \
                (((n + 1) & (0 - ((n >> 4) & 1))) << 4)+ \
                (((n + 1) & (0 - ((n >> 3) & 1))) << 3) + \
                (((n + 1) & (0 - ((n >> 2) & 1))) << 2) + \
                (((n + 1) & (0 - ((n >> 1) & 1))) << 1) + \
                (((n + 1) & (0 - ((n >> 0) & 1))) << 0) ) \
                >> 1





